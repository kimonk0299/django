#Deploys with the RDS not the local psql
---
- hosts: all
  become_method: sudo
  become: yes
  gather_facts: False


  vars:
    ssh_key: "{{ home }}/.ssh/id_rsa"
    user: ubuntu
    home: "/home/{{ user }}"
    venv_home: "{{ home }}/.virtualenvs"
    venv_bin: "{{ home }}/.virtualenvs/{{ project_name }}/bin"
    project_name: "django"
    project_root: "{{ home }}/{{ project_name }}"
    logs_root: "{{ home }}/{{ project_name }}/logs"
    info_log_file: "{{ logs_root }}/info.log"
    error_log_file: "{{ logs_root }}/error.log"
    django_settings: "{{ 'config.settings.production' }}"
    media_path : "{{ home }}/django"
    local_project_root: "{{ playbook_dir | dirname }}"
    local_ssh_key: /home/ubuntu/.ssh/id_rsa
    server_name: "{{ hostvars[inventory_hostname]['ansible_host'] }}"


  tasks:

    - debug:
        msg: "{{ server_name }}"

    - name: get variables
      debug: var=hostvars

    - name: update apt cache
      apt: update_cache=yes cache_valid_time=3600


    - name: install required system packages
      apt: name={{ item }} state=present
      with_items:
        - python3-pip
        - python3-dev
        - nginx
        - git
        - htop
        - iotop
        - nmap
        - openssh-server
        - tree
        - vim

    - name: rsync project to target host
      synchronize:
        src: "{{ local_project_root }}"
        dest: "{{ home }}"
        rsync_opts:
          - "--delete"

    - name: install virtualenv via pip
      pip:
        name: virtualenv
        executable: pip3


    - name: create virtualenv and install requirements
      pip:
        requirements: "{{ project_root }}/requirements/production.txt"
        virtualenv: "{{ venv_home }}/{{ project_name }}"
        virtualenv_python: python3

    - name: Create media folder
      file:
        path: "{{ home }}/media"
        state: directory
        owner: root
        group: root
        mode: 0777

    - name: Create logs folder
      file:
        path: "{{ logs_root }}"
        state: directory
        owner: root
        group: root
        mode: 0777        

    - name: Creates info log file
      file:
        path: "{{ info_log_file }}"
        state: touch
        owner: root
        group: root
        mode: 0777

    - name: Creates error log file
      file:
        path: "{{ error_log_file }}"
        state: touch
        owner: root
        group: root
        mode: 0777     

    - name: django makemigrations
      command:
        chdir="{{ project_root }}" "{{ venv_bin}}/python3" manage.py makemigrations --settings="{{ django_settings }}"


    - name: django migrate
      command:
        chdir="{{ project_root }}" "{{ venv_bin}}/python3" manage.py migrate --noinput --settings="{{ django_settings }}"


    - name: run seed_db
      command:
        chdir="{{ project_root }}" "{{ venv_bin}}/python3" manage.py seed_db --settings="{{ django_settings }}"


    - name: django collectstatic
      command:
        chdir="{{ project_root }}" "{{ venv_bin}}/python3" manage.py collectstatic --noinput --settings="{{ django_settings }}"

    - name: django create groups
      command:
        chdir="{{ project_root }}" "{{ venv_bin}}/python3" manage.py create_groups --settings="{{ django_settings }}"

    - name: create gunicorn service
      template:
        src: mgunicorn.service.j2
        dest: /etc/systemd/system/mgunicorn.service
        mode: 0777

    - name: create nginx conf files
      template:
        src: nginx.conf.j2
        dest: /etc/nginx/sites-available/default


    - name: create nginx conf files
      template:
        src: nginx.conf.j2
        dest: /etc/nginx/sites-enabled/default


    - name: reload systemd to reread configs
      systemd: daemon_reload=yes


    - name: restart gunicorn
      service: name=mgunicorn state=restarted


    - name: restart nginx
      service: name=nginx state=restarted
